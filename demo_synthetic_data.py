#!/usr/bin/env python3
"""
Demonstration: Generate and Display Synthetic Data Examples
Shows examples of synthetic data generated by the DP-CTGAN implementation
"""

import pandas as pd
import numpy as np
import warnings
warnings.filterwarnings('ignore')

# Import our modules
from data_preprocessor import AdultDataPreprocessor
from dp_ctgan_opacus import OpacusDifferentiallyPrivateCTGAN

def main():
    print("üéØ SYNTHETIC DATA GENERATION DEMONSTRATION")
    print("=" * 60)
    print("Using DP-CTGAN with Opacus integration")
    print("Dataset: Adult Census Income")
    print("=" * 60)
    
    # Step 1: Load and prepare data
    print("\nüìä STEP 1: Loading Adult dataset...")
    preprocessor = AdultDataPreprocessor()
    
    try:
        # Download if needed
        preprocessor.download()
        
        # Load data
        df_train, df_test = preprocessor.load()
        train_data, test_data = preprocessor.combine_and_split(df_train, df_test, random_state=42)
        
        # Use smaller sample for demo
        train_sample = train_data.sample(1000, random_state=42)
        print(f"Using {len(train_sample)} samples for training")
        
        # Preprocess
        train_processed, _ = preprocessor.preprocess(
            train_sample, test_data.head(100), 
            missing_strategy='fillna', 
            encoding='label', 
            scale=False
        )
        
        print(f"Processed data shape: {train_processed.shape}")
        print(f"Columns: {list(train_processed.columns)}")
        
        # Show original data sample
        print("\nüìã ORIGINAL DATA SAMPLE:")
        print(train_data.head(10))
        
    except Exception as e:
        print(f"Error loading data: {e}")
        print("Creating synthetic demo data instead...")
        
        # Create demo data if Adult dataset fails
        np.random.seed(42)
        train_processed = pd.DataFrame({
            'age': np.random.randint(18, 80, 1000),
            'workclass': np.random.choice(['Private', 'Self-emp', 'Gov'], 1000),
            'education': np.random.choice(['HS-grad', 'Bachelors', 'Masters'], 1000),
            'income': np.random.choice(['<=50K', '>50K'], 1000)
        })
        
        # Encode categorical variables
        for col in ['workclass', 'education', 'income']:
            train_processed[col] = pd.Categorical(train_processed[col]).codes
        
        print("Using synthetic demo data for demonstration")
        print(f"Demo data shape: {train_processed.shape}")
    
    # Step 2: Initialize and train DP-CTGAN
    print("\nü§ñ STEP 2: Training DP-CTGAN (Quick Mode)...")
    print("Privacy parameters: Œµ=1.0, Œ¥=1e-5")
    
    try:
        # Initialize with quick training parameters
        dp_ctgan = OpacusDifferentiallyPrivateCTGAN(
            epsilon=1.0,
            delta=1e-5,
            max_grad_norm=1.0,
            epochs=5,  # Very quick for demo
            batch_size=100,
            verbose=True
        )
        
        # Train the model
        print("Training model...")
        dp_ctgan.fit(train_processed)
        
        # Step 3: Generate synthetic data
        print("\nüé≤ STEP 3: Generating synthetic data...")
        n_samples = 20  # Generate 20 samples for display
        
        synthetic_data = dp_ctgan.sample(n_samples)
        
        print(f"\n‚úÖ GENERATED {len(synthetic_data)} SYNTHETIC SAMPLES:")
        print("=" * 60)
        print(synthetic_data)
        
        print(f"\nüìä SYNTHETIC DATA STATISTICS:")
        print("=" * 40)
        print(synthetic_data.describe())
        
        # Compare with original data statistics
        if 'train_data' in locals():
            print(f"\nüìà COMPARISON WITH ORIGINAL DATA:")
            print("=" * 40)
            print("Original data statistics:")
            print(train_data.describe())
        
        print(f"\nüîí PRIVACY INFORMATION:")
        print("=" * 30)
        print(f"Privacy budget used: Œµ = {dp_ctgan.get_privacy_spent():.4f}")
        print(f"Privacy budget limit: Œµ = {dp_ctgan.epsilon}")
        print(f"Delta parameter: Œ¥ = {dp_ctgan.delta}")
        
        print(f"\nüéâ SUCCESS! Synthetic data generated successfully!")
        print("The DP-CTGAN model has learned to generate realistic")
        print("synthetic data while preserving differential privacy.")
        
    except Exception as e:
        print(f"‚ùå Training failed: {e}")
        print("\nThis might be due to:")
        print("- Opacus compatibility issues")
        print("- Memory constraints")
        print("- Missing dependencies")
        print("\nTrying simplified approach...")
        
        # Fallback: Show what synthetic data would look like
        print(f"\nüìù EXAMPLE OF EXPECTED SYNTHETIC DATA:")
        print("=" * 50)
        
        # Create example synthetic data based on original patterns
        if 'train_processed' in locals():
            example_synthetic = pd.DataFrame()
            for col in train_processed.columns:
                if train_processed[col].dtype in ['int64', 'float64']:
                    # Numeric columns: add noise to original values
                    mean_val = train_processed[col].mean()
                    std_val = train_processed[col].std()
                    example_synthetic[col] = np.random.normal(mean_val, std_val, 20)
                    example_synthetic[col] = example_synthetic[col].round().astype(int)
                else:
                    # Categorical: sample from original distribution
                    example_synthetic[col] = np.random.choice(
                        train_processed[col].unique(), 20
                    )
            
            print("Example synthetic data (simulated):")
            print(example_synthetic.head(10))
            
            print(f"\nüí° This demonstrates the type of synthetic data")
            print("that would be generated by the DP-CTGAN model.")

if __name__ == "__main__":
    main() 