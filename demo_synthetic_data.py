#!/usr/bin/env python3
"""
Demonstration: Generate and Display Synthetic Data Examples
Shows examples of synthetic data generated by the DP-CTGAN implementation
"""

import pandas as pd
import numpy as np
import warnings
import argparse
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
import os

warnings.filterwarnings('ignore')

# Import our modules
from data_preprocessor import AdultDataPreprocessor
from dp_ctgan_opacus import OpacusDifferentiallyPrivateCTGAN

def plot_comparison(original_data, synthetic_data, epsilon, output_dir):
    """Generate comparison plots for original vs synthetic data"""
    # Create output directory if it doesn't exist
    os.makedirs(output_dir, exist_ok=True)
    
    # Set style
    plt.style.use('seaborn')
    
    # 1. Numerical Columns Comparison
    numerical_cols = original_data.select_dtypes(include=['int64', 'float64']).columns
    n_cols = len(numerical_cols)
    fig, axes = plt.subplots(n_cols, 1, figsize=(12, 4*n_cols))
    fig.suptitle(f'Numerical Columns Comparison (Œµ={epsilon})', fontsize=16)
    
    for idx, col in enumerate(numerical_cols):
        ax = axes[idx] if n_cols > 1 else axes
        sns.kdeplot(data=original_data[col], label='Original', ax=ax)
        sns.kdeplot(data=synthetic_data[col], label='Synthetic', ax=ax)
        ax.set_title(f'{col} Distribution')
        ax.legend()
    
    plt.tight_layout()
    plt.savefig(f'{output_dir}/numerical_comparison_epsilon{epsilon}.png')
    plt.close()
    
    # 2. Categorical Columns Comparison
    categorical_cols = original_data.select_dtypes(include=['object']).columns
    for col in categorical_cols:
        plt.figure(figsize=(12, 6))
        
        # Get value counts
        orig_counts = original_data[col].value_counts(normalize=True)
        synth_counts = synthetic_data[col].value_counts(normalize=True)
        
        # Create comparison plot
        df_plot = pd.DataFrame({
            'Original': orig_counts,
            'Synthetic': synth_counts
        }).fillna(0)
        
        df_plot.plot(kind='bar', ax=plt.gca())
        plt.title(f'{col} Distribution Comparison (Œµ={epsilon})')
        plt.xlabel(col)
        plt.ylabel('Proportion')
        plt.xticks(rotation=45, ha='right')
        plt.tight_layout()
        plt.savefig(f'{output_dir}/categorical_{col}_epsilon{epsilon}.png')
        plt.close()

def save_results_to_file(original_data, synthetic_data, privacy_info, filename):
    """Save results to a nicely formatted file"""
    with open(filename, 'w', encoding='utf-8') as f:
        f.write("=" * 80 + "\n")
        f.write("SYNTHETIC DATA GENERATION RESULTS\n")
        f.write("=" * 80 + "\n\n")
        
        # Original Data
        f.write("ORIGINAL DATA SAMPLE (First 10 records):\n")
        f.write("-" * 80 + "\n")
        f.write(original_data.head(10).to_string())
        f.write("\n\n")
        
        f.write("ORIGINAL DATA STATISTICS:\n")
        f.write("-" * 80 + "\n")
        f.write(original_data.describe().to_string())
        f.write("\n\n")
        
        # Synthetic Data
        f.write("SYNTHETIC DATA SAMPLE (First 10 records):\n")
        f.write("-" * 80 + "\n")
        f.write(synthetic_data.head(10).to_string())
        f.write("\n\n")
        
        f.write("SYNTHETIC DATA STATISTICS:\n")
        f.write("-" * 80 + "\n")
        f.write(synthetic_data.describe().to_string())
        f.write("\n\n")
        
        # Privacy Information
        f.write("PRIVACY INFORMATION:\n")
        f.write("-" * 80 + "\n")
        for key, value in privacy_info.items():
            f.write(f"{key}: {value}\n")
        
        # Column-wise Comparison
        f.write("\nCOLUMN-WISE COMPARISON:\n")
        f.write("-" * 80 + "\n")
        for col in original_data.columns:
            if original_data[col].dtype == 'object':
                f.write(f"\n{col}:\n")
                f.write("Original value counts:\n")
                f.write(original_data[col].value_counts().head().to_string())
                f.write("\nSynthetic value counts:\n")
                f.write(synthetic_data[col].value_counts().head().to_string())
                f.write("\n")

def generate_synthetic_data(train_data, epsilon):
    """Generate synthetic data for a given epsilon value"""
    # Initialize and train DP-CTGAN
    dp_ctgan = OpacusDifferentiallyPrivateCTGAN(
        epsilon=epsilon,
        delta=1e-5,
        max_grad_norm=1.0,
        epochs=10,
        batch_size=256,
        verbose=True
    )
    
    # Train the model
    dp_ctgan.fit(train_data)
    
    # Generate synthetic data
    n_samples = len(train_data)
    synthetic_data = dp_ctgan.sample(n_samples)
    
    return synthetic_data, dp_ctgan

def main():
    # Parse command line arguments
    parser = argparse.ArgumentParser(description='Generate synthetic data with differential privacy')
    parser.add_argument('--epsilon', type=float, default=1.0,
                      help='Privacy budget (epsilon) for differential privacy')
    args = parser.parse_args()

    print("üéØ SYNTHETIC DATA GENERATION DEMONSTRATION")
    print("=" * 60)
    print(f"Using DP-CTGAN with Opacus integration (Œµ={args.epsilon})")
    print("Dataset: Adult Census Income")
    print("=" * 60)
    
    # Step 1: Load and prepare data
    print("\nüìä STEP 1: Loading Adult dataset...")
    preprocessor = AdultDataPreprocessor()
    
    try:
        # Download if needed
        preprocessor.download()
        
        # Load data
        df_train, df_test = preprocessor.load()
        train_data, test_data = preprocessor.combine_and_split(df_train, df_test, random_state=42)
        
        # Use full training data
        train_sample = train_data
        print(f"Using {len(train_sample)} samples for training")
        
        # Store original categorical values
        categorical_columns = train_sample.select_dtypes(include=['object']).columns
        categorical_mappings = {}
        for col in categorical_columns:
            categorical_mappings[col] = dict(enumerate(train_sample[col].unique()))
        
        # Preprocess
        train_processed, _ = preprocessor.preprocess(
            train_sample, test_data.head(100), 
            missing_strategy='fillna', 
            encoding='label', 
            scale=False
        )
        
        print(f"Processed data shape: {train_processed.shape}")
        print(f"Columns: {list(train_processed.columns)}")
        
        # Generate synthetic data for different epsilon values
        epsilons = [1.0, 5.0, 10.0]  # Medium, high, very high privacy
        output_dir = "synthetic_data_comparisons"
        
        for epsilon in epsilons:
            print(f"\nü§ñ Generating synthetic data with Œµ={epsilon}...")
            synthetic_data, dp_ctgan = generate_synthetic_data(train_processed, epsilon)
            
            # Convert categorical columns back to original values
            for col in categorical_columns:
                if col in synthetic_data.columns:
                    synthetic_data[col] = synthetic_data[col].map(categorical_mappings[col])
            
            # Generate comparison plots
            plot_comparison(train_data, synthetic_data, epsilon, output_dir)
            
            # Save results to file
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"{output_dir}/synthetic_data_results_epsilon{epsilon}_{timestamp}.txt"
            
            privacy_info = {
                "Privacy budget used (Œµ)": f"{dp_ctgan.get_privacy_spent():.4f}",
                "Privacy budget limit (Œµ)": f"{dp_ctgan.epsilon}",
                "Delta parameter (Œ¥)": f"{dp_ctgan.delta}"
            }
            
            save_results_to_file(train_data, synthetic_data, privacy_info, filename)
            
            print(f"‚úÖ Results for Œµ={epsilon} have been saved to {filename}")
            print(f"‚úÖ Comparison plots have been saved to {output_dir}/")
        
    except Exception as e:
        print(f"‚ùå Training failed: {e}")
        print("\nThis might be due to:")
        print("- Opacus compatibility issues")
        print("- Memory constraints")
        print("- Missing dependencies")

if __name__ == "__main__":
    main() 